// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcServices.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Grpcservices {

  /// <summary>Holder for reflection information generated from grpcServices.proto</summary>
  public static partial class GrpcServicesReflection {

    #region Descriptor
    /// <summary>File descriptor for grpcServices.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GrpcServicesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJncnBjU2VydmljZXMucHJvdG8SDGdycGNzZXJ2aWNlcyJ8CgxCYXRjaFJl",
            "cXVlc3QSEQoJc3RhdGlvbklkGAEgASgJEhIKCnJlcG9ydFR5cGUYAiABKAgS",
            "EQoJdHJhbnNUeXBlGAMgASgIEhEKCXN0YXJ0VGltZRgEIAEoCRIPCgdlbmRU",
            "aW1lGAUgASgJEg4KBmdwcnNpZBgGIAEoCSI3CghCYXRjaE1zZxILCgNtc2cY",
            "ASABKAkSDQoFTm90T0wYAiABKAgSDwoHVGltZU91dBgDIAEoCCJ8CglCYXRj",
            "aERhdGESEQoJc3RhdGlvbklkGAEgASgJEhMKC3N0YXRpb25UeXBlGAIgASgI",
            "EgwKBHRpbWUYAyABKAkSDAoEZGF0YRgEIAEoCRINCgVOb3RPTBgFIAEoCBIL",
            "CgNFbmQYBiABKAgSDwoHVGltZU91dBgHIAEoCCIZCgtTdGF0aW9uTGlzdBIK",
            "CgJpZBgBIAMoCSIWCgdUcnVMaXN0EgsKA3RydRgBIAMoCCIhCglTdWJjZW50",
            "ZXISFAoMc3ViY2VudGVyZElkGAEgASgJIikKB0R0dUxpc3QSHgoDZHR1GAEg",
            "AygLMhEuZ3JwY3NlcnZpY2VzLkR0dSLiAQoDRHR1EhMKC3N1YmNlbnRlcklk",
            "GAEgASgJEhUKDXN1YmNlbnRlck5hbWUYAiABKAkSEwoLc3RhdGlvbk5hbWUY",
            "AyABKAkSEQoJc3RhdGlvbklkGAQgASgJEg4KBmdwcnNJZBgFIAEoCRIOCgZn",
            "c21OdW0YBiABKAkSDgoGaXBBZGRyGAcgASgJEhAKCGNvbm5UaW1lGAggASgJ",
            "EhMKC3JlZnJlc2hUaW1lGAkgASgJEg0KBXN0YXRlGAogASgJEgwKBHBvcnQY",
            "CyABKAkSEwoLc3RhdGlvblR5cGUYDCABKAkiTgoLRG93blJlcXVlc3QSEQoJ",
            "c3RhdGlvbklkGAEgASgJEgwKBGNtZHMYAiABKAkSDwoHZ3Byc051bRgDIAEo",
            "CRINCgVpc1NldBgEIAEoCCLkCgoIRG93bkNvbmYSDQoFY2xvY2sYASABKAkS",
            "NwoLbm9ybWFsU3RhdGUYAiABKA4yIi5ncnBjc2VydmljZXMuRG93bkNvbmYu",
            "Tm9ybWFsU3RhdGUSDwoHdm9sdGFnZRgDIAEoARIUCgxzdGF0aW9uQ21kSUQY",
            "BCABKAkSNQoKdGltZUNob2ljZRgFIAEoDjIhLmdycGNzZXJ2aWNlcy5Eb3du",
            "Q29uZi5UaW1lQ2hvaWNlEjUKCnRpbWVQZXJpb2QYBiABKA4yIS5ncnBjc2Vy",
            "dmljZXMuRG93bkNvbmYuVGltZVBlcmlvZBI1Cgp3b3JrU3RhdHVzGAcgASgO",
            "MiEuZ3JwY3NlcnZpY2VzLkRvd25Db25mLldvcmtTdGF0dXMSEgoKdmVyc2lv",
            "bk51bRgIIAEoCRI3CgttYWluQ2hhbm5lbBgJIAEoDjIiLmdycGNzZXJ2aWNl",
            "cy5Eb3duQ29uZi5DaGFubmVsVHlwZRI3Cgt2aWNlQ2hhbm5lbBgKIAEoDjIi",
            "LmdycGNzZXJ2aWNlcy5Eb3duQ29uZi5DaGFubmVsVHlwZRIPCgd0ZWxlTnVt",
            "GAsgASgJEhAKCHJpbmdzTnVtGAwgASgBEhQKDGRlc3RQaG9uZU51bRgNIAEo",
            "CRITCgt0ZXJtaW5hbE51bRgOIAEoCRIQCghyZXNwQmVhbRgPIAEoCRIQCghh",
            "dmVnVGltZRgQIAEoARIdChVyYWluUGx1c1JlcG9ydGVkVmFsdWUYESABKAES",
            "CgoCa0MYEiABKAkSDAoEcmFpbhgTIAEoARINCgV3YXRlchgUIAEoARIeChZ3",
            "YXRlclBsdXNSZXBvcnRlZFZhbHVlGBUgASgBEkEKBnNlbGVjdBgWIAEoDjIx",
            "LmdycGNzZXJ2aWNlcy5Eb3duQ29uZi5TZWxlY3RDb2xsZWN0aW9uUGFyYWdy",
            "YXBocxI3CgtzdGF0aW9uVHlwZRgXIAEoDjIiLmdycGNzZXJ2aWNlcy5Eb3du",
            "Q29uZi5TdGF0aW9uVHlwZRIQCgh1c2VyTmFtZRgYIAEoCRITCgtzdGF0aW9u",
            "TmFtZRgZIAEoCRIMCgRpc09MGBogASgIEgsKA1RSVRgbIAEoCCIsCgtOb3Jt",
            "YWxTdGF0ZRIOCgpHUFJTX1N0YXRlEAASDQoJR1NNX1N0YXRlEAEiLgoKVGlt",
            "ZUNob2ljZRIOCgpBZGp1c3RUaW1lEAASEAoMTm9BZGp1c3RUaW1lEAEiaQoK",
            "VGltZVBlcmlvZBIHCgNPbmUQABIHCgNUd28QARIICgRGb3VyEAISBwoDU2l4",
            "EAMSCQoFRWlnaHQQBBIKCgZUd2VsdmUQBRIOCgpUd2VudHlGb3VyEAYSDwoL",
            "Rm91cnR5RWlnaHQQByI2CgpXb3JrU3RhdHVzEgkKBURlYnVnEAASCgoGTm9y",
            "bWFsEAESEQoNRG91YmxlQWRkcmVzcxACImoKC0NoYW5uZWxUeXBlEggKBEdQ",
            "UlMQABIHCgNHU00QARIKCgZCZWlEb3UQAhIICgRQU1ROEAMSCAoETm9uZRAE",
            "EgcKA1ZIRhAFEhAKDEJlaWRvdU5vcm1hbBAGEg0KCUJlaWRvdTUwMBAHIjwK",
            "GlNlbGVjdENvbGxlY3Rpb25QYXJhZ3JhcGhzEg0KCUZpdmVPclNpeBAAEg8K",
            "C1Rlbk9yVHdlbHZlEAEiewoLU3RhdGlvblR5cGUSDQoJRVJhaW5GYWxsEAAS",
            "DwoLRVJpdmVyV2F0ZXIQARIOCgpFSHlkcm9sb2d5EAISCQoFRVNvaWwQAxIN",
            "CglFU29pbFJhaW4QBBIOCgpFU29pbFdhdGVyEAUSEgoORVNvaWxIeWRyb2xv",
            "Z3kQBjL1AwoMZ1JQQ1NlcnZpY2VzEkEKCkdldEZlYXR1cmUSGS5ncnBjc2Vy",
            "dmljZXMuRG93blJlcXVlc3QaFi5ncnBjc2VydmljZXMuRG93bkNvbmYiABJG",
            "CgtHZXREb3duQ29uZhIZLmdycGNzZXJ2aWNlcy5Eb3duUmVxdWVzdBoWLmdy",
            "cGNzZXJ2aWNlcy5Eb3duQ29uZiIAKAEwARJDCgtHZXRCYXRjaE1zZxIaLmdy",
            "cGNzZXJ2aWNlcy5CYXRjaFJlcXVlc3QaFi5ncnBjc2VydmljZXMuQmF0Y2hN",
            "c2ciABJICg1MaXN0QmF0Y2hEYXRhEhouZ3JwY3NlcnZpY2VzLkJhdGNoUmVx",
            "dWVzdBoXLmdycGNzZXJ2aWNlcy5CYXRjaERhdGEiADABEkoKDUdldEJhdGNo",
            "VHJhbnMSGi5ncnBjc2VydmljZXMuQmF0Y2hSZXF1ZXN0GhcuZ3JwY3NlcnZp",
            "Y2VzLkJhdGNoRGF0YSIAKAEwARI+CgpHZXREdHVMaXN0EhcuZ3JwY3NlcnZp",
            "Y2VzLlN1YmNlbnRlchoVLmdycGNzZXJ2aWNlcy5EdHVMaXN0IgASPwoJQmF0",
            "Y2hUaW1lEhkuZ3JwY3NlcnZpY2VzLlN0YXRpb25MaXN0GhUuZ3JwY3NlcnZp",
            "Y2VzLlRydUxpc3QiAGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpcservices.BatchRequest), global::Grpcservices.BatchRequest.Parser, new[]{ "StationId", "ReportType", "TransType", "StartTime", "EndTime", "Gprsid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpcservices.BatchMsg), global::Grpcservices.BatchMsg.Parser, new[]{ "Msg", "NotOL", "TimeOut" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpcservices.BatchData), global::Grpcservices.BatchData.Parser, new[]{ "StationId", "StationType", "Time", "Data", "NotOL", "End", "TimeOut" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpcservices.StationList), global::Grpcservices.StationList.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpcservices.TruList), global::Grpcservices.TruList.Parser, new[]{ "Tru" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpcservices.Subcenter), global::Grpcservices.Subcenter.Parser, new[]{ "SubcenterdId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpcservices.DtuList), global::Grpcservices.DtuList.Parser, new[]{ "Dtu" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpcservices.Dtu), global::Grpcservices.Dtu.Parser, new[]{ "SubcenterId", "SubcenterName", "StationName", "StationId", "GprsId", "GsmNum", "IpAddr", "ConnTime", "RefreshTime", "State", "Port", "StationType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpcservices.DownRequest), global::Grpcservices.DownRequest.Parser, new[]{ "StationId", "Cmds", "GprsNum", "IsSet" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpcservices.DownConf), global::Grpcservices.DownConf.Parser, new[]{ "Clock", "NormalState", "Voltage", "StationCmdID", "TimeChoice", "TimePeriod", "WorkStatus", "VersionNum", "MainChannel", "ViceChannel", "TeleNum", "RingsNum", "DestPhoneNum", "TerminalNum", "RespBeam", "AvegTime", "RainPlusReportedValue", "KC", "Rain", "Water", "WaterPlusReportedValue", "Select", "StationType", "UserName", "StationName", "IsOL", "TRU" }, null, new[]{ typeof(global::Grpcservices.DownConf.Types.NormalState), typeof(global::Grpcservices.DownConf.Types.TimeChoice), typeof(global::Grpcservices.DownConf.Types.TimePeriod), typeof(global::Grpcservices.DownConf.Types.WorkStatus), typeof(global::Grpcservices.DownConf.Types.ChannelType), typeof(global::Grpcservices.DownConf.Types.SelectCollectionParagraphs), typeof(global::Grpcservices.DownConf.Types.StationType) }, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class BatchRequest : pb::IMessage<BatchRequest> {
    private static readonly pb::MessageParser<BatchRequest> _parser = new pb::MessageParser<BatchRequest>(() => new BatchRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BatchRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpcservices.GrpcServicesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchRequest(BatchRequest other) : this() {
      stationId_ = other.stationId_;
      reportType_ = other.reportType_;
      transType_ = other.transType_;
      startTime_ = other.startTime_;
      endTime_ = other.endTime_;
      gprsid_ = other.gprsid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchRequest Clone() {
      return new BatchRequest(this);
    }

    /// <summary>Field number for the "stationId" field.</summary>
    public const int StationIdFieldNumber = 1;
    private string stationId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StationId {
      get { return stationId_; }
      set {
        stationId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reportType" field.</summary>
    public const int ReportTypeFieldNumber = 2;
    private bool reportType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ReportType {
      get { return reportType_; }
      set {
        reportType_ = value;
      }
    }

    /// <summary>Field number for the "transType" field.</summary>
    public const int TransTypeFieldNumber = 3;
    private bool transType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TransType {
      get { return transType_; }
      set {
        transType_ = value;
      }
    }

    /// <summary>Field number for the "startTime" field.</summary>
    public const int StartTimeFieldNumber = 4;
    private string startTime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StartTime {
      get { return startTime_; }
      set {
        startTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "endTime" field.</summary>
    public const int EndTimeFieldNumber = 5;
    private string endTime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EndTime {
      get { return endTime_; }
      set {
        endTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gprsid" field.</summary>
    public const int GprsidFieldNumber = 6;
    private string gprsid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Gprsid {
      get { return gprsid_; }
      set {
        gprsid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BatchRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BatchRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StationId != other.StationId) return false;
      if (ReportType != other.ReportType) return false;
      if (TransType != other.TransType) return false;
      if (StartTime != other.StartTime) return false;
      if (EndTime != other.EndTime) return false;
      if (Gprsid != other.Gprsid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StationId.Length != 0) hash ^= StationId.GetHashCode();
      if (ReportType != false) hash ^= ReportType.GetHashCode();
      if (TransType != false) hash ^= TransType.GetHashCode();
      if (StartTime.Length != 0) hash ^= StartTime.GetHashCode();
      if (EndTime.Length != 0) hash ^= EndTime.GetHashCode();
      if (Gprsid.Length != 0) hash ^= Gprsid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StationId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(StationId);
      }
      if (ReportType != false) {
        output.WriteRawTag(16);
        output.WriteBool(ReportType);
      }
      if (TransType != false) {
        output.WriteRawTag(24);
        output.WriteBool(TransType);
      }
      if (StartTime.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(StartTime);
      }
      if (EndTime.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(EndTime);
      }
      if (Gprsid.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Gprsid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StationId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StationId);
      }
      if (ReportType != false) {
        size += 1 + 1;
      }
      if (TransType != false) {
        size += 1 + 1;
      }
      if (StartTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StartTime);
      }
      if (EndTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EndTime);
      }
      if (Gprsid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Gprsid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BatchRequest other) {
      if (other == null) {
        return;
      }
      if (other.StationId.Length != 0) {
        StationId = other.StationId;
      }
      if (other.ReportType != false) {
        ReportType = other.ReportType;
      }
      if (other.TransType != false) {
        TransType = other.TransType;
      }
      if (other.StartTime.Length != 0) {
        StartTime = other.StartTime;
      }
      if (other.EndTime.Length != 0) {
        EndTime = other.EndTime;
      }
      if (other.Gprsid.Length != 0) {
        Gprsid = other.Gprsid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            StationId = input.ReadString();
            break;
          }
          case 16: {
            ReportType = input.ReadBool();
            break;
          }
          case 24: {
            TransType = input.ReadBool();
            break;
          }
          case 34: {
            StartTime = input.ReadString();
            break;
          }
          case 42: {
            EndTime = input.ReadString();
            break;
          }
          case 50: {
            Gprsid = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BatchMsg : pb::IMessage<BatchMsg> {
    private static readonly pb::MessageParser<BatchMsg> _parser = new pb::MessageParser<BatchMsg>(() => new BatchMsg());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BatchMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpcservices.GrpcServicesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchMsg(BatchMsg other) : this() {
      msg_ = other.msg_;
      notOL_ = other.notOL_;
      timeOut_ = other.timeOut_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchMsg Clone() {
      return new BatchMsg(this);
    }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 1;
    private string msg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Msg {
      get { return msg_; }
      set {
        msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "NotOL" field.</summary>
    public const int NotOLFieldNumber = 2;
    private bool notOL_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NotOL {
      get { return notOL_; }
      set {
        notOL_ = value;
      }
    }

    /// <summary>Field number for the "TimeOut" field.</summary>
    public const int TimeOutFieldNumber = 3;
    private bool timeOut_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TimeOut {
      get { return timeOut_; }
      set {
        timeOut_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BatchMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BatchMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msg != other.Msg) return false;
      if (NotOL != other.NotOL) return false;
      if (TimeOut != other.TimeOut) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msg.Length != 0) hash ^= Msg.GetHashCode();
      if (NotOL != false) hash ^= NotOL.GetHashCode();
      if (TimeOut != false) hash ^= TimeOut.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msg.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Msg);
      }
      if (NotOL != false) {
        output.WriteRawTag(16);
        output.WriteBool(NotOL);
      }
      if (TimeOut != false) {
        output.WriteRawTag(24);
        output.WriteBool(TimeOut);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Msg);
      }
      if (NotOL != false) {
        size += 1 + 1;
      }
      if (TimeOut != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BatchMsg other) {
      if (other == null) {
        return;
      }
      if (other.Msg.Length != 0) {
        Msg = other.Msg;
      }
      if (other.NotOL != false) {
        NotOL = other.NotOL;
      }
      if (other.TimeOut != false) {
        TimeOut = other.TimeOut;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Msg = input.ReadString();
            break;
          }
          case 16: {
            NotOL = input.ReadBool();
            break;
          }
          case 24: {
            TimeOut = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BatchData : pb::IMessage<BatchData> {
    private static readonly pb::MessageParser<BatchData> _parser = new pb::MessageParser<BatchData>(() => new BatchData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BatchData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpcservices.GrpcServicesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchData(BatchData other) : this() {
      stationId_ = other.stationId_;
      stationType_ = other.stationType_;
      time_ = other.time_;
      data_ = other.data_;
      notOL_ = other.notOL_;
      end_ = other.end_;
      timeOut_ = other.timeOut_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchData Clone() {
      return new BatchData(this);
    }

    /// <summary>Field number for the "stationId" field.</summary>
    public const int StationIdFieldNumber = 1;
    private string stationId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StationId {
      get { return stationId_; }
      set {
        stationId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "stationType" field.</summary>
    public const int StationTypeFieldNumber = 2;
    private bool stationType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool StationType {
      get { return stationType_; }
      set {
        stationType_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 3;
    private string time_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Time {
      get { return time_; }
      set {
        time_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 4;
    private string data_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "NotOL" field.</summary>
    public const int NotOLFieldNumber = 5;
    private bool notOL_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NotOL {
      get { return notOL_; }
      set {
        notOL_ = value;
      }
    }

    /// <summary>Field number for the "End" field.</summary>
    public const int EndFieldNumber = 6;
    private bool end_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool End {
      get { return end_; }
      set {
        end_ = value;
      }
    }

    /// <summary>Field number for the "TimeOut" field.</summary>
    public const int TimeOutFieldNumber = 7;
    private bool timeOut_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TimeOut {
      get { return timeOut_; }
      set {
        timeOut_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BatchData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BatchData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StationId != other.StationId) return false;
      if (StationType != other.StationType) return false;
      if (Time != other.Time) return false;
      if (Data != other.Data) return false;
      if (NotOL != other.NotOL) return false;
      if (End != other.End) return false;
      if (TimeOut != other.TimeOut) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StationId.Length != 0) hash ^= StationId.GetHashCode();
      if (StationType != false) hash ^= StationType.GetHashCode();
      if (Time.Length != 0) hash ^= Time.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (NotOL != false) hash ^= NotOL.GetHashCode();
      if (End != false) hash ^= End.GetHashCode();
      if (TimeOut != false) hash ^= TimeOut.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StationId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(StationId);
      }
      if (StationType != false) {
        output.WriteRawTag(16);
        output.WriteBool(StationType);
      }
      if (Time.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Time);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Data);
      }
      if (NotOL != false) {
        output.WriteRawTag(40);
        output.WriteBool(NotOL);
      }
      if (End != false) {
        output.WriteRawTag(48);
        output.WriteBool(End);
      }
      if (TimeOut != false) {
        output.WriteRawTag(56);
        output.WriteBool(TimeOut);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StationId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StationId);
      }
      if (StationType != false) {
        size += 1 + 1;
      }
      if (Time.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Time);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Data);
      }
      if (NotOL != false) {
        size += 1 + 1;
      }
      if (End != false) {
        size += 1 + 1;
      }
      if (TimeOut != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BatchData other) {
      if (other == null) {
        return;
      }
      if (other.StationId.Length != 0) {
        StationId = other.StationId;
      }
      if (other.StationType != false) {
        StationType = other.StationType;
      }
      if (other.Time.Length != 0) {
        Time = other.Time;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      if (other.NotOL != false) {
        NotOL = other.NotOL;
      }
      if (other.End != false) {
        End = other.End;
      }
      if (other.TimeOut != false) {
        TimeOut = other.TimeOut;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            StationId = input.ReadString();
            break;
          }
          case 16: {
            StationType = input.ReadBool();
            break;
          }
          case 26: {
            Time = input.ReadString();
            break;
          }
          case 34: {
            Data = input.ReadString();
            break;
          }
          case 40: {
            NotOL = input.ReadBool();
            break;
          }
          case 48: {
            End = input.ReadBool();
            break;
          }
          case 56: {
            TimeOut = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StationList : pb::IMessage<StationList> {
    private static readonly pb::MessageParser<StationList> _parser = new pb::MessageParser<StationList>(() => new StationList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StationList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpcservices.GrpcServicesReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StationList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StationList(StationList other) : this() {
      id_ = other.id_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StationList Clone() {
      return new StationList(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_id_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> id_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Id {
      get { return id_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StationList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StationList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!id_.Equals(other.id_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= id_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      id_.WriteTo(output, _repeated_id_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += id_.CalculateSize(_repeated_id_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StationList other) {
      if (other == null) {
        return;
      }
      id_.Add(other.id_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            id_.AddEntriesFrom(input, _repeated_id_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TruList : pb::IMessage<TruList> {
    private static readonly pb::MessageParser<TruList> _parser = new pb::MessageParser<TruList>(() => new TruList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TruList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpcservices.GrpcServicesReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TruList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TruList(TruList other) : this() {
      tru_ = other.tru_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TruList Clone() {
      return new TruList(this);
    }

    /// <summary>Field number for the "tru" field.</summary>
    public const int TruFieldNumber = 1;
    private static readonly pb::FieldCodec<bool> _repeated_tru_codec
        = pb::FieldCodec.ForBool(10);
    private readonly pbc::RepeatedField<bool> tru_ = new pbc::RepeatedField<bool>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<bool> Tru {
      get { return tru_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TruList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TruList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!tru_.Equals(other.tru_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= tru_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      tru_.WriteTo(output, _repeated_tru_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += tru_.CalculateSize(_repeated_tru_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TruList other) {
      if (other == null) {
        return;
      }
      tru_.Add(other.tru_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            tru_.AddEntriesFrom(input, _repeated_tru_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Subcenter : pb::IMessage<Subcenter> {
    private static readonly pb::MessageParser<Subcenter> _parser = new pb::MessageParser<Subcenter>(() => new Subcenter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Subcenter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpcservices.GrpcServicesReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Subcenter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Subcenter(Subcenter other) : this() {
      subcenterdId_ = other.subcenterdId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Subcenter Clone() {
      return new Subcenter(this);
    }

    /// <summary>Field number for the "subcenterdId" field.</summary>
    public const int SubcenterdIdFieldNumber = 1;
    private string subcenterdId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SubcenterdId {
      get { return subcenterdId_; }
      set {
        subcenterdId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Subcenter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Subcenter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SubcenterdId != other.SubcenterdId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SubcenterdId.Length != 0) hash ^= SubcenterdId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SubcenterdId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SubcenterdId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SubcenterdId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SubcenterdId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Subcenter other) {
      if (other == null) {
        return;
      }
      if (other.SubcenterdId.Length != 0) {
        SubcenterdId = other.SubcenterdId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SubcenterdId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DtuList : pb::IMessage<DtuList> {
    private static readonly pb::MessageParser<DtuList> _parser = new pb::MessageParser<DtuList>(() => new DtuList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DtuList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpcservices.GrpcServicesReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DtuList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DtuList(DtuList other) : this() {
      dtu_ = other.dtu_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DtuList Clone() {
      return new DtuList(this);
    }

    /// <summary>Field number for the "dtu" field.</summary>
    public const int DtuFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Grpcservices.Dtu> _repeated_dtu_codec
        = pb::FieldCodec.ForMessage(10, global::Grpcservices.Dtu.Parser);
    private readonly pbc::RepeatedField<global::Grpcservices.Dtu> dtu_ = new pbc::RepeatedField<global::Grpcservices.Dtu>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Grpcservices.Dtu> Dtu {
      get { return dtu_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DtuList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DtuList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!dtu_.Equals(other.dtu_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= dtu_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      dtu_.WriteTo(output, _repeated_dtu_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += dtu_.CalculateSize(_repeated_dtu_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DtuList other) {
      if (other == null) {
        return;
      }
      dtu_.Add(other.dtu_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            dtu_.AddEntriesFrom(input, _repeated_dtu_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Dtu : pb::IMessage<Dtu> {
    private static readonly pb::MessageParser<Dtu> _parser = new pb::MessageParser<Dtu>(() => new Dtu());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Dtu> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpcservices.GrpcServicesReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Dtu() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Dtu(Dtu other) : this() {
      subcenterId_ = other.subcenterId_;
      subcenterName_ = other.subcenterName_;
      stationName_ = other.stationName_;
      stationId_ = other.stationId_;
      gprsId_ = other.gprsId_;
      gsmNum_ = other.gsmNum_;
      ipAddr_ = other.ipAddr_;
      connTime_ = other.connTime_;
      refreshTime_ = other.refreshTime_;
      state_ = other.state_;
      port_ = other.port_;
      stationType_ = other.stationType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Dtu Clone() {
      return new Dtu(this);
    }

    /// <summary>Field number for the "subcenterId" field.</summary>
    public const int SubcenterIdFieldNumber = 1;
    private string subcenterId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SubcenterId {
      get { return subcenterId_; }
      set {
        subcenterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "subcenterName" field.</summary>
    public const int SubcenterNameFieldNumber = 2;
    private string subcenterName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SubcenterName {
      get { return subcenterName_; }
      set {
        subcenterName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "stationName" field.</summary>
    public const int StationNameFieldNumber = 3;
    private string stationName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StationName {
      get { return stationName_; }
      set {
        stationName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "stationId" field.</summary>
    public const int StationIdFieldNumber = 4;
    private string stationId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StationId {
      get { return stationId_; }
      set {
        stationId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gprsId" field.</summary>
    public const int GprsIdFieldNumber = 5;
    private string gprsId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GprsId {
      get { return gprsId_; }
      set {
        gprsId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gsmNum" field.</summary>
    public const int GsmNumFieldNumber = 6;
    private string gsmNum_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GsmNum {
      get { return gsmNum_; }
      set {
        gsmNum_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ipAddr" field.</summary>
    public const int IpAddrFieldNumber = 7;
    private string ipAddr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IpAddr {
      get { return ipAddr_; }
      set {
        ipAddr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "connTime" field.</summary>
    public const int ConnTimeFieldNumber = 8;
    private string connTime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConnTime {
      get { return connTime_; }
      set {
        connTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "refreshTime" field.</summary>
    public const int RefreshTimeFieldNumber = 9;
    private string refreshTime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RefreshTime {
      get { return refreshTime_; }
      set {
        refreshTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 10;
    private string state_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string State {
      get { return state_; }
      set {
        state_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 11;
    private string port_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Port {
      get { return port_; }
      set {
        port_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "stationType" field.</summary>
    public const int StationTypeFieldNumber = 12;
    private string stationType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StationType {
      get { return stationType_; }
      set {
        stationType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Dtu);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Dtu other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SubcenterId != other.SubcenterId) return false;
      if (SubcenterName != other.SubcenterName) return false;
      if (StationName != other.StationName) return false;
      if (StationId != other.StationId) return false;
      if (GprsId != other.GprsId) return false;
      if (GsmNum != other.GsmNum) return false;
      if (IpAddr != other.IpAddr) return false;
      if (ConnTime != other.ConnTime) return false;
      if (RefreshTime != other.RefreshTime) return false;
      if (State != other.State) return false;
      if (Port != other.Port) return false;
      if (StationType != other.StationType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SubcenterId.Length != 0) hash ^= SubcenterId.GetHashCode();
      if (SubcenterName.Length != 0) hash ^= SubcenterName.GetHashCode();
      if (StationName.Length != 0) hash ^= StationName.GetHashCode();
      if (StationId.Length != 0) hash ^= StationId.GetHashCode();
      if (GprsId.Length != 0) hash ^= GprsId.GetHashCode();
      if (GsmNum.Length != 0) hash ^= GsmNum.GetHashCode();
      if (IpAddr.Length != 0) hash ^= IpAddr.GetHashCode();
      if (ConnTime.Length != 0) hash ^= ConnTime.GetHashCode();
      if (RefreshTime.Length != 0) hash ^= RefreshTime.GetHashCode();
      if (State.Length != 0) hash ^= State.GetHashCode();
      if (Port.Length != 0) hash ^= Port.GetHashCode();
      if (StationType.Length != 0) hash ^= StationType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SubcenterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SubcenterId);
      }
      if (SubcenterName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SubcenterName);
      }
      if (StationName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(StationName);
      }
      if (StationId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(StationId);
      }
      if (GprsId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(GprsId);
      }
      if (GsmNum.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(GsmNum);
      }
      if (IpAddr.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(IpAddr);
      }
      if (ConnTime.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(ConnTime);
      }
      if (RefreshTime.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(RefreshTime);
      }
      if (State.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(State);
      }
      if (Port.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Port);
      }
      if (StationType.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(StationType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SubcenterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SubcenterId);
      }
      if (SubcenterName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SubcenterName);
      }
      if (StationName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StationName);
      }
      if (StationId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StationId);
      }
      if (GprsId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GprsId);
      }
      if (GsmNum.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GsmNum);
      }
      if (IpAddr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IpAddr);
      }
      if (ConnTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConnTime);
      }
      if (RefreshTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RefreshTime);
      }
      if (State.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(State);
      }
      if (Port.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Port);
      }
      if (StationType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StationType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Dtu other) {
      if (other == null) {
        return;
      }
      if (other.SubcenterId.Length != 0) {
        SubcenterId = other.SubcenterId;
      }
      if (other.SubcenterName.Length != 0) {
        SubcenterName = other.SubcenterName;
      }
      if (other.StationName.Length != 0) {
        StationName = other.StationName;
      }
      if (other.StationId.Length != 0) {
        StationId = other.StationId;
      }
      if (other.GprsId.Length != 0) {
        GprsId = other.GprsId;
      }
      if (other.GsmNum.Length != 0) {
        GsmNum = other.GsmNum;
      }
      if (other.IpAddr.Length != 0) {
        IpAddr = other.IpAddr;
      }
      if (other.ConnTime.Length != 0) {
        ConnTime = other.ConnTime;
      }
      if (other.RefreshTime.Length != 0) {
        RefreshTime = other.RefreshTime;
      }
      if (other.State.Length != 0) {
        State = other.State;
      }
      if (other.Port.Length != 0) {
        Port = other.Port;
      }
      if (other.StationType.Length != 0) {
        StationType = other.StationType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SubcenterId = input.ReadString();
            break;
          }
          case 18: {
            SubcenterName = input.ReadString();
            break;
          }
          case 26: {
            StationName = input.ReadString();
            break;
          }
          case 34: {
            StationId = input.ReadString();
            break;
          }
          case 42: {
            GprsId = input.ReadString();
            break;
          }
          case 50: {
            GsmNum = input.ReadString();
            break;
          }
          case 58: {
            IpAddr = input.ReadString();
            break;
          }
          case 66: {
            ConnTime = input.ReadString();
            break;
          }
          case 74: {
            RefreshTime = input.ReadString();
            break;
          }
          case 82: {
            State = input.ReadString();
            break;
          }
          case 90: {
            Port = input.ReadString();
            break;
          }
          case 98: {
            StationType = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DownRequest : pb::IMessage<DownRequest> {
    private static readonly pb::MessageParser<DownRequest> _parser = new pb::MessageParser<DownRequest>(() => new DownRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DownRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpcservices.GrpcServicesReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DownRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DownRequest(DownRequest other) : this() {
      stationId_ = other.stationId_;
      cmds_ = other.cmds_;
      gprsNum_ = other.gprsNum_;
      isSet_ = other.isSet_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DownRequest Clone() {
      return new DownRequest(this);
    }

    /// <summary>Field number for the "stationId" field.</summary>
    public const int StationIdFieldNumber = 1;
    private string stationId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StationId {
      get { return stationId_; }
      set {
        stationId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cmds" field.</summary>
    public const int CmdsFieldNumber = 2;
    private string cmds_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cmds {
      get { return cmds_; }
      set {
        cmds_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gprsNum" field.</summary>
    public const int GprsNumFieldNumber = 3;
    private string gprsNum_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GprsNum {
      get { return gprsNum_; }
      set {
        gprsNum_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isSet" field.</summary>
    public const int IsSetFieldNumber = 4;
    private bool isSet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSet {
      get { return isSet_; }
      set {
        isSet_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DownRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DownRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StationId != other.StationId) return false;
      if (Cmds != other.Cmds) return false;
      if (GprsNum != other.GprsNum) return false;
      if (IsSet != other.IsSet) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StationId.Length != 0) hash ^= StationId.GetHashCode();
      if (Cmds.Length != 0) hash ^= Cmds.GetHashCode();
      if (GprsNum.Length != 0) hash ^= GprsNum.GetHashCode();
      if (IsSet != false) hash ^= IsSet.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StationId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(StationId);
      }
      if (Cmds.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Cmds);
      }
      if (GprsNum.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(GprsNum);
      }
      if (IsSet != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsSet);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StationId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StationId);
      }
      if (Cmds.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cmds);
      }
      if (GprsNum.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GprsNum);
      }
      if (IsSet != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DownRequest other) {
      if (other == null) {
        return;
      }
      if (other.StationId.Length != 0) {
        StationId = other.StationId;
      }
      if (other.Cmds.Length != 0) {
        Cmds = other.Cmds;
      }
      if (other.GprsNum.Length != 0) {
        GprsNum = other.GprsNum;
      }
      if (other.IsSet != false) {
        IsSet = other.IsSet;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            StationId = input.ReadString();
            break;
          }
          case 18: {
            Cmds = input.ReadString();
            break;
          }
          case 26: {
            GprsNum = input.ReadString();
            break;
          }
          case 32: {
            IsSet = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DownConf : pb::IMessage<DownConf> {
    private static readonly pb::MessageParser<DownConf> _parser = new pb::MessageParser<DownConf>(() => new DownConf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DownConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpcservices.GrpcServicesReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DownConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DownConf(DownConf other) : this() {
      clock_ = other.clock_;
      normalState_ = other.normalState_;
      voltage_ = other.voltage_;
      stationCmdID_ = other.stationCmdID_;
      timeChoice_ = other.timeChoice_;
      timePeriod_ = other.timePeriod_;
      workStatus_ = other.workStatus_;
      versionNum_ = other.versionNum_;
      mainChannel_ = other.mainChannel_;
      viceChannel_ = other.viceChannel_;
      teleNum_ = other.teleNum_;
      ringsNum_ = other.ringsNum_;
      destPhoneNum_ = other.destPhoneNum_;
      terminalNum_ = other.terminalNum_;
      respBeam_ = other.respBeam_;
      avegTime_ = other.avegTime_;
      rainPlusReportedValue_ = other.rainPlusReportedValue_;
      kC_ = other.kC_;
      rain_ = other.rain_;
      water_ = other.water_;
      waterPlusReportedValue_ = other.waterPlusReportedValue_;
      select_ = other.select_;
      stationType_ = other.stationType_;
      userName_ = other.userName_;
      stationName_ = other.stationName_;
      isOL_ = other.isOL_;
      tRU_ = other.tRU_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DownConf Clone() {
      return new DownConf(this);
    }

    /// <summary>Field number for the "clock" field.</summary>
    public const int ClockFieldNumber = 1;
    private string clock_ = "";
    /// <summary>
    //// &lt;summary>
    //// 03 时钟
    //// &lt;/summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Clock {
      get { return clock_; }
      set {
        clock_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "normalState" field.</summary>
    public const int NormalStateFieldNumber = 2;
    private global::Grpcservices.DownConf.Types.NormalState normalState_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grpcservices.DownConf.Types.NormalState NormalState {
      get { return normalState_; }
      set {
        normalState_ = value;
      }
    }

    /// <summary>Field number for the "voltage" field.</summary>
    public const int VoltageFieldNumber = 3;
    private double voltage_;
    /// <summary>
    //// &lt;summary>
    //// 05 电压
    //// &lt;/summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Voltage {
      get { return voltage_; }
      set {
        voltage_ = value;
      }
    }

    /// <summary>Field number for the "stationCmdID" field.</summary>
    public const int StationCmdIDFieldNumber = 4;
    private string stationCmdID_ = "";
    /// <summary>
    //// &lt;summary>
    //// 08 站号
    //// &lt;/summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StationCmdID {
      get { return stationCmdID_; }
      set {
        stationCmdID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timeChoice" field.</summary>
    public const int TimeChoiceFieldNumber = 5;
    private global::Grpcservices.DownConf.Types.TimeChoice timeChoice_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grpcservices.DownConf.Types.TimeChoice TimeChoice {
      get { return timeChoice_; }
      set {
        timeChoice_ = value;
      }
    }

    /// <summary>Field number for the "timePeriod" field.</summary>
    public const int TimePeriodFieldNumber = 6;
    private global::Grpcservices.DownConf.Types.TimePeriod timePeriod_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grpcservices.DownConf.Types.TimePeriod TimePeriod {
      get { return timePeriod_; }
      set {
        timePeriod_ = value;
      }
    }

    /// <summary>Field number for the "workStatus" field.</summary>
    public const int WorkStatusFieldNumber = 7;
    private global::Grpcservices.DownConf.Types.WorkStatus workStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grpcservices.DownConf.Types.WorkStatus WorkStatus {
      get { return workStatus_; }
      set {
        workStatus_ = value;
      }
    }

    /// <summary>Field number for the "versionNum" field.</summary>
    public const int VersionNumFieldNumber = 8;
    private string versionNum_ = "";
    /// <summary>
    //// &lt;summary>
    //// 19 版本号
    //// &lt;/summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VersionNum {
      get { return versionNum_; }
      set {
        versionNum_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mainChannel" field.</summary>
    public const int MainChannelFieldNumber = 9;
    private global::Grpcservices.DownConf.Types.ChannelType mainChannel_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grpcservices.DownConf.Types.ChannelType MainChannel {
      get { return mainChannel_; }
      set {
        mainChannel_ = value;
      }
    }

    /// <summary>Field number for the "viceChannel" field.</summary>
    public const int ViceChannelFieldNumber = 10;
    private global::Grpcservices.DownConf.Types.ChannelType viceChannel_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grpcservices.DownConf.Types.ChannelType ViceChannel {
      get { return viceChannel_; }
      set {
        viceChannel_ = value;
      }
    }

    /// <summary>Field number for the "teleNum" field.</summary>
    public const int TeleNumFieldNumber = 11;
    private string teleNum_ = "";
    /// <summary>
    //// &lt;summary>
    //// 28 SIM卡号
    //// &lt;/summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TeleNum {
      get { return teleNum_; }
      set {
        teleNum_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ringsNum" field.</summary>
    public const int RingsNumFieldNumber = 12;
    private double ringsNum_;
    /// <summary>
    //// &lt;summary>
    //// 37 振铃次数
    //// &lt;/summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double RingsNum {
      get { return ringsNum_; }
      set {
        ringsNum_ = value;
      }
    }

    /// <summary>Field number for the "destPhoneNum" field.</summary>
    public const int DestPhoneNumFieldNumber = 13;
    private string destPhoneNum_ = "";
    /// <summary>
    //// &lt;summary>
    //// 49 目的地手机号码
    //// &lt;/summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DestPhoneNum {
      get { return destPhoneNum_; }
      set {
        destPhoneNum_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "terminalNum" field.</summary>
    public const int TerminalNumFieldNumber = 14;
    private string terminalNum_ = "";
    /// <summary>
    //// &lt;summary>
    //// 15 终端机号
    //// &lt;/summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TerminalNum {
      get { return terminalNum_; }
      set {
        terminalNum_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "respBeam" field.</summary>
    public const int RespBeamFieldNumber = 15;
    private string respBeam_ = "";
    /// <summary>
    //// &lt;summary>
    //// 09 响应波束
    //// &lt;/summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RespBeam {
      get { return respBeam_; }
      set {
        respBeam_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "avegTime" field.</summary>
    public const int AvegTimeFieldNumber = 16;
    private double avegTime_;
    /// <summary>
    //// &lt;summary>
    //// 16 平均时间
    //// &lt;/summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AvegTime {
      get { return avegTime_; }
      set {
        avegTime_ = value;
      }
    }

    /// <summary>Field number for the "rainPlusReportedValue" field.</summary>
    public const int RainPlusReportedValueFieldNumber = 17;
    private double rainPlusReportedValue_;
    /// <summary>
    //// &lt;summary>
    //// 10 雨量加报值
    //// &lt;/summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double RainPlusReportedValue {
      get { return rainPlusReportedValue_; }
      set {
        rainPlusReportedValue_ = value;
      }
    }

    /// <summary>Field number for the "kC" field.</summary>
    public const int KCFieldNumber = 18;
    private string kC_ = "";
    /// <summary>
    //// &lt;summary>
    //// 62 KC
    //// &lt;/summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string KC {
      get { return kC_; }
      set {
        kC_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rain" field.</summary>
    public const int RainFieldNumber = 19;
    private double rain_;
    /// <summary>
    //// &lt;summary>
    //// 02 雨量
    //// &lt;/summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Rain {
      get { return rain_; }
      set {
        rain_ = value;
      }
    }

    /// <summary>Field number for the "water" field.</summary>
    public const int WaterFieldNumber = 20;
    private double water_;
    /// <summary>
    //// &lt;summary>
    //// 12 水位
    //// &lt;/summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Water {
      get { return water_; }
      set {
        water_ = value;
      }
    }

    /// <summary>Field number for the "waterPlusReportedValue" field.</summary>
    public const int WaterPlusReportedValueFieldNumber = 21;
    private double waterPlusReportedValue_;
    /// <summary>
    //// &lt;summary>
    //// 06 水位加报值
    //// &lt;/summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WaterPlusReportedValue {
      get { return waterPlusReportedValue_; }
      set {
        waterPlusReportedValue_ = value;
      }
    }

    /// <summary>Field number for the "select" field.</summary>
    public const int SelectFieldNumber = 22;
    private global::Grpcservices.DownConf.Types.SelectCollectionParagraphs select_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grpcservices.DownConf.Types.SelectCollectionParagraphs Select {
      get { return select_; }
      set {
        select_ = value;
      }
    }

    /// <summary>Field number for the "stationType" field.</summary>
    public const int StationTypeFieldNumber = 23;
    private global::Grpcservices.DownConf.Types.StationType stationType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grpcservices.DownConf.Types.StationType StationType {
      get { return stationType_; }
      set {
        stationType_ = value;
      }
    }

    /// <summary>Field number for the "userName" field.</summary>
    public const int UserNameFieldNumber = 24;
    private string userName_ = "";
    /// <summary>
    //// &lt;summary>
    //// 54  用户名
    //// &lt;/summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "stationName" field.</summary>
    public const int StationNameFieldNumber = 25;
    private string stationName_ = "";
    /// <summary>
    //// &lt;summary>
    //// 55  测站名
    //// &lt;/summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StationName {
      get { return stationName_; }
      set {
        stationName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isOL" field.</summary>
    public const int IsOLFieldNumber = 26;
    private bool isOL_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOL {
      get { return isOL_; }
      set {
        isOL_ = value;
      }
    }

    /// <summary>Field number for the "TRU" field.</summary>
    public const int TRUFieldNumber = 27;
    private bool tRU_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TRU {
      get { return tRU_; }
      set {
        tRU_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DownConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DownConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Clock != other.Clock) return false;
      if (NormalState != other.NormalState) return false;
      if (Voltage != other.Voltage) return false;
      if (StationCmdID != other.StationCmdID) return false;
      if (TimeChoice != other.TimeChoice) return false;
      if (TimePeriod != other.TimePeriod) return false;
      if (WorkStatus != other.WorkStatus) return false;
      if (VersionNum != other.VersionNum) return false;
      if (MainChannel != other.MainChannel) return false;
      if (ViceChannel != other.ViceChannel) return false;
      if (TeleNum != other.TeleNum) return false;
      if (RingsNum != other.RingsNum) return false;
      if (DestPhoneNum != other.DestPhoneNum) return false;
      if (TerminalNum != other.TerminalNum) return false;
      if (RespBeam != other.RespBeam) return false;
      if (AvegTime != other.AvegTime) return false;
      if (RainPlusReportedValue != other.RainPlusReportedValue) return false;
      if (KC != other.KC) return false;
      if (Rain != other.Rain) return false;
      if (Water != other.Water) return false;
      if (WaterPlusReportedValue != other.WaterPlusReportedValue) return false;
      if (Select != other.Select) return false;
      if (StationType != other.StationType) return false;
      if (UserName != other.UserName) return false;
      if (StationName != other.StationName) return false;
      if (IsOL != other.IsOL) return false;
      if (TRU != other.TRU) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Clock.Length != 0) hash ^= Clock.GetHashCode();
      if (NormalState != 0) hash ^= NormalState.GetHashCode();
      if (Voltage != 0D) hash ^= Voltage.GetHashCode();
      if (StationCmdID.Length != 0) hash ^= StationCmdID.GetHashCode();
      if (TimeChoice != 0) hash ^= TimeChoice.GetHashCode();
      if (TimePeriod != 0) hash ^= TimePeriod.GetHashCode();
      if (WorkStatus != 0) hash ^= WorkStatus.GetHashCode();
      if (VersionNum.Length != 0) hash ^= VersionNum.GetHashCode();
      if (MainChannel != 0) hash ^= MainChannel.GetHashCode();
      if (ViceChannel != 0) hash ^= ViceChannel.GetHashCode();
      if (TeleNum.Length != 0) hash ^= TeleNum.GetHashCode();
      if (RingsNum != 0D) hash ^= RingsNum.GetHashCode();
      if (DestPhoneNum.Length != 0) hash ^= DestPhoneNum.GetHashCode();
      if (TerminalNum.Length != 0) hash ^= TerminalNum.GetHashCode();
      if (RespBeam.Length != 0) hash ^= RespBeam.GetHashCode();
      if (AvegTime != 0D) hash ^= AvegTime.GetHashCode();
      if (RainPlusReportedValue != 0D) hash ^= RainPlusReportedValue.GetHashCode();
      if (KC.Length != 0) hash ^= KC.GetHashCode();
      if (Rain != 0D) hash ^= Rain.GetHashCode();
      if (Water != 0D) hash ^= Water.GetHashCode();
      if (WaterPlusReportedValue != 0D) hash ^= WaterPlusReportedValue.GetHashCode();
      if (Select != 0) hash ^= Select.GetHashCode();
      if (StationType != 0) hash ^= StationType.GetHashCode();
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (StationName.Length != 0) hash ^= StationName.GetHashCode();
      if (IsOL != false) hash ^= IsOL.GetHashCode();
      if (TRU != false) hash ^= TRU.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Clock.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Clock);
      }
      if (NormalState != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) NormalState);
      }
      if (Voltage != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Voltage);
      }
      if (StationCmdID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(StationCmdID);
      }
      if (TimeChoice != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) TimeChoice);
      }
      if (TimePeriod != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) TimePeriod);
      }
      if (WorkStatus != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) WorkStatus);
      }
      if (VersionNum.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(VersionNum);
      }
      if (MainChannel != 0) {
        output.WriteRawTag(72);
        output.WriteEnum((int) MainChannel);
      }
      if (ViceChannel != 0) {
        output.WriteRawTag(80);
        output.WriteEnum((int) ViceChannel);
      }
      if (TeleNum.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(TeleNum);
      }
      if (RingsNum != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(RingsNum);
      }
      if (DestPhoneNum.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(DestPhoneNum);
      }
      if (TerminalNum.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(TerminalNum);
      }
      if (RespBeam.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(RespBeam);
      }
      if (AvegTime != 0D) {
        output.WriteRawTag(129, 1);
        output.WriteDouble(AvegTime);
      }
      if (RainPlusReportedValue != 0D) {
        output.WriteRawTag(137, 1);
        output.WriteDouble(RainPlusReportedValue);
      }
      if (KC.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(KC);
      }
      if (Rain != 0D) {
        output.WriteRawTag(153, 1);
        output.WriteDouble(Rain);
      }
      if (Water != 0D) {
        output.WriteRawTag(161, 1);
        output.WriteDouble(Water);
      }
      if (WaterPlusReportedValue != 0D) {
        output.WriteRawTag(169, 1);
        output.WriteDouble(WaterPlusReportedValue);
      }
      if (Select != 0) {
        output.WriteRawTag(176, 1);
        output.WriteEnum((int) Select);
      }
      if (StationType != 0) {
        output.WriteRawTag(184, 1);
        output.WriteEnum((int) StationType);
      }
      if (UserName.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(UserName);
      }
      if (StationName.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(StationName);
      }
      if (IsOL != false) {
        output.WriteRawTag(208, 1);
        output.WriteBool(IsOL);
      }
      if (TRU != false) {
        output.WriteRawTag(216, 1);
        output.WriteBool(TRU);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Clock.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Clock);
      }
      if (NormalState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) NormalState);
      }
      if (Voltage != 0D) {
        size += 1 + 8;
      }
      if (StationCmdID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StationCmdID);
      }
      if (TimeChoice != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TimeChoice);
      }
      if (TimePeriod != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TimePeriod);
      }
      if (WorkStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) WorkStatus);
      }
      if (VersionNum.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VersionNum);
      }
      if (MainChannel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MainChannel);
      }
      if (ViceChannel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ViceChannel);
      }
      if (TeleNum.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TeleNum);
      }
      if (RingsNum != 0D) {
        size += 1 + 8;
      }
      if (DestPhoneNum.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DestPhoneNum);
      }
      if (TerminalNum.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TerminalNum);
      }
      if (RespBeam.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RespBeam);
      }
      if (AvegTime != 0D) {
        size += 2 + 8;
      }
      if (RainPlusReportedValue != 0D) {
        size += 2 + 8;
      }
      if (KC.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(KC);
      }
      if (Rain != 0D) {
        size += 2 + 8;
      }
      if (Water != 0D) {
        size += 2 + 8;
      }
      if (WaterPlusReportedValue != 0D) {
        size += 2 + 8;
      }
      if (Select != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Select);
      }
      if (StationType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) StationType);
      }
      if (UserName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (StationName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(StationName);
      }
      if (IsOL != false) {
        size += 2 + 1;
      }
      if (TRU != false) {
        size += 2 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DownConf other) {
      if (other == null) {
        return;
      }
      if (other.Clock.Length != 0) {
        Clock = other.Clock;
      }
      if (other.NormalState != 0) {
        NormalState = other.NormalState;
      }
      if (other.Voltage != 0D) {
        Voltage = other.Voltage;
      }
      if (other.StationCmdID.Length != 0) {
        StationCmdID = other.StationCmdID;
      }
      if (other.TimeChoice != 0) {
        TimeChoice = other.TimeChoice;
      }
      if (other.TimePeriod != 0) {
        TimePeriod = other.TimePeriod;
      }
      if (other.WorkStatus != 0) {
        WorkStatus = other.WorkStatus;
      }
      if (other.VersionNum.Length != 0) {
        VersionNum = other.VersionNum;
      }
      if (other.MainChannel != 0) {
        MainChannel = other.MainChannel;
      }
      if (other.ViceChannel != 0) {
        ViceChannel = other.ViceChannel;
      }
      if (other.TeleNum.Length != 0) {
        TeleNum = other.TeleNum;
      }
      if (other.RingsNum != 0D) {
        RingsNum = other.RingsNum;
      }
      if (other.DestPhoneNum.Length != 0) {
        DestPhoneNum = other.DestPhoneNum;
      }
      if (other.TerminalNum.Length != 0) {
        TerminalNum = other.TerminalNum;
      }
      if (other.RespBeam.Length != 0) {
        RespBeam = other.RespBeam;
      }
      if (other.AvegTime != 0D) {
        AvegTime = other.AvegTime;
      }
      if (other.RainPlusReportedValue != 0D) {
        RainPlusReportedValue = other.RainPlusReportedValue;
      }
      if (other.KC.Length != 0) {
        KC = other.KC;
      }
      if (other.Rain != 0D) {
        Rain = other.Rain;
      }
      if (other.Water != 0D) {
        Water = other.Water;
      }
      if (other.WaterPlusReportedValue != 0D) {
        WaterPlusReportedValue = other.WaterPlusReportedValue;
      }
      if (other.Select != 0) {
        Select = other.Select;
      }
      if (other.StationType != 0) {
        StationType = other.StationType;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      if (other.StationName.Length != 0) {
        StationName = other.StationName;
      }
      if (other.IsOL != false) {
        IsOL = other.IsOL;
      }
      if (other.TRU != false) {
        TRU = other.TRU;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Clock = input.ReadString();
            break;
          }
          case 16: {
            normalState_ = (global::Grpcservices.DownConf.Types.NormalState) input.ReadEnum();
            break;
          }
          case 25: {
            Voltage = input.ReadDouble();
            break;
          }
          case 34: {
            StationCmdID = input.ReadString();
            break;
          }
          case 40: {
            timeChoice_ = (global::Grpcservices.DownConf.Types.TimeChoice) input.ReadEnum();
            break;
          }
          case 48: {
            timePeriod_ = (global::Grpcservices.DownConf.Types.TimePeriod) input.ReadEnum();
            break;
          }
          case 56: {
            workStatus_ = (global::Grpcservices.DownConf.Types.WorkStatus) input.ReadEnum();
            break;
          }
          case 66: {
            VersionNum = input.ReadString();
            break;
          }
          case 72: {
            mainChannel_ = (global::Grpcservices.DownConf.Types.ChannelType) input.ReadEnum();
            break;
          }
          case 80: {
            viceChannel_ = (global::Grpcservices.DownConf.Types.ChannelType) input.ReadEnum();
            break;
          }
          case 90: {
            TeleNum = input.ReadString();
            break;
          }
          case 97: {
            RingsNum = input.ReadDouble();
            break;
          }
          case 106: {
            DestPhoneNum = input.ReadString();
            break;
          }
          case 114: {
            TerminalNum = input.ReadString();
            break;
          }
          case 122: {
            RespBeam = input.ReadString();
            break;
          }
          case 129: {
            AvegTime = input.ReadDouble();
            break;
          }
          case 137: {
            RainPlusReportedValue = input.ReadDouble();
            break;
          }
          case 146: {
            KC = input.ReadString();
            break;
          }
          case 153: {
            Rain = input.ReadDouble();
            break;
          }
          case 161: {
            Water = input.ReadDouble();
            break;
          }
          case 169: {
            WaterPlusReportedValue = input.ReadDouble();
            break;
          }
          case 176: {
            select_ = (global::Grpcservices.DownConf.Types.SelectCollectionParagraphs) input.ReadEnum();
            break;
          }
          case 184: {
            stationType_ = (global::Grpcservices.DownConf.Types.StationType) input.ReadEnum();
            break;
          }
          case 194: {
            UserName = input.ReadString();
            break;
          }
          case 202: {
            StationName = input.ReadString();
            break;
          }
          case 208: {
            IsOL = input.ReadBool();
            break;
          }
          case 216: {
            TRU = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the DownConf message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      //// &lt;summary>
      //// 04 常规状态
      //// &lt;/summary>
      /// </summary>
      public enum NormalState {
        [pbr::OriginalName("GPRS_State")] GprsState = 0,
        [pbr::OriginalName("GSM_State")] GsmState = 1,
      }

      /// <summary>
      //// &lt;summary>
      //// 14 对时选择
      //// &lt;/summary>
      /// </summary>
      public enum TimeChoice {
        [pbr::OriginalName("AdjustTime")] AdjustTime = 0,
        [pbr::OriginalName("NoAdjustTime")] NoAdjustTime = 1,
      }

      /// <summary>
      //// &lt;summary>
      //// 24 定时段次
      //// &lt;/summary>
      /// </summary>
      public enum TimePeriod {
        [pbr::OriginalName("One")] One = 0,
        [pbr::OriginalName("Two")] Two = 1,
        [pbr::OriginalName("Four")] Four = 2,
        [pbr::OriginalName("Six")] Six = 3,
        [pbr::OriginalName("Eight")] Eight = 4,
        [pbr::OriginalName("Twelve")] Twelve = 5,
        [pbr::OriginalName("TwentyFour")] TwentyFour = 6,
        [pbr::OriginalName("FourtyEight")] FourtyEight = 7,
      }

      /// <summary>
      //// &lt;summary>
      //// 20 工作状态
      //// &lt;/summary>
      /// </summary>
      public enum WorkStatus {
        [pbr::OriginalName("Debug")] Debug = 0,
        [pbr::OriginalName("Normal")] Normal = 1,
        [pbr::OriginalName("DoubleAddress")] DoubleAddress = 2,
      }

      /// <summary>
      //// &lt;summary>
      //// 27 主备信道
      //// &lt;/summary>
      /// </summary>
      public enum ChannelType {
        [pbr::OriginalName("GPRS")] Gprs = 0,
        [pbr::OriginalName("GSM")] Gsm = 1,
        [pbr::OriginalName("BeiDou")] BeiDou = 2,
        [pbr::OriginalName("PSTN")] Pstn = 3,
        [pbr::OriginalName("None")] None = 4,
        [pbr::OriginalName("VHF")] Vhf = 5,
        [pbr::OriginalName("BeidouNormal")] BeidouNormal = 6,
        [pbr::OriginalName("Beidou500")] Beidou500 = 7,
      }

      /// <summary>
      //// &lt;summary>
      //// 11 采集段次选择
      //// &lt;/summary>
      /// </summary>
      public enum SelectCollectionParagraphs {
        [pbr::OriginalName("FiveOrSix")] FiveOrSix = 0,
        [pbr::OriginalName("TenOrTwelve")] TenOrTwelve = 1,
      }

      /// <summary>
      //// &lt;summary>
      //// 07 测站类型
      //// &lt;/summary>
      /// </summary>
      public enum StationType {
        /// <summary>
        ///	雨量站
        /// </summary>
        [pbr::OriginalName("ERainFall")] ErainFall = 0,
        /// <summary>
        ///	水位站
        /// </summary>
        [pbr::OriginalName("ERiverWater")] EriverWater = 1,
        /// <summary>
        ///	水文站
        /// </summary>
        [pbr::OriginalName("EHydrology")] Ehydrology = 2,
        /// <summary>
        ///  04墒情站
        /// </summary>
        [pbr::OriginalName("ESoil")] Esoil = 3,
        /// <summary>
        ///  05墒情雨量站
        /// </summary>
        [pbr::OriginalName("ESoilRain")] EsoilRain = 4,
        /// <summary>
        ///  06，16墒情水位站
        /// </summary>
        [pbr::OriginalName("ESoilWater")] EsoilWater = 5,
        /// <summary>
        ///  07，17墒情水文站
        /// </summary>
        [pbr::OriginalName("ESoilHydrology")] EsoilHydrology = 6,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
