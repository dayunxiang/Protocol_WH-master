// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcServices.proto
#pragma warning disable 1591
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using grpc = global::Grpc.Core;

namespace Grpcservices {
  public static partial class gRPCServices
  {
    static readonly string __ServiceName = "grpcservices.gRPCServices";

    static readonly grpc::Marshaller<global::Grpcservices.DownRequest> __Marshaller_DownRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpcservices.DownRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grpcservices.DownConf> __Marshaller_DownConf = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpcservices.DownConf.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grpcservices.BatchRequest> __Marshaller_BatchRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpcservices.BatchRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grpcservices.BatchMsg> __Marshaller_BatchMsg = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpcservices.BatchMsg.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grpcservices.BatchData> __Marshaller_BatchData = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpcservices.BatchData.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grpcservices.Subcenter> __Marshaller_Subcenter = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpcservices.Subcenter.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grpcservices.DtuList> __Marshaller_DtuList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpcservices.DtuList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grpcservices.StationList> __Marshaller_StationList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpcservices.StationList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grpcservices.TruList> __Marshaller_TruList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpcservices.TruList.Parser.ParseFrom);

    static readonly grpc::Method<global::Grpcservices.DownRequest, global::Grpcservices.DownConf> __Method_GetFeature = new grpc::Method<global::Grpcservices.DownRequest, global::Grpcservices.DownConf>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetFeature",
        __Marshaller_DownRequest,
        __Marshaller_DownConf);

    static readonly grpc::Method<global::Grpcservices.DownRequest, global::Grpcservices.DownConf> __Method_GetDownConf = new grpc::Method<global::Grpcservices.DownRequest, global::Grpcservices.DownConf>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "GetDownConf",
        __Marshaller_DownRequest,
        __Marshaller_DownConf);

    static readonly grpc::Method<global::Grpcservices.BatchRequest, global::Grpcservices.BatchMsg> __Method_GetBatchMsg = new grpc::Method<global::Grpcservices.BatchRequest, global::Grpcservices.BatchMsg>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetBatchMsg",
        __Marshaller_BatchRequest,
        __Marshaller_BatchMsg);

    static readonly grpc::Method<global::Grpcservices.BatchRequest, global::Grpcservices.BatchData> __Method_ListBatchData = new grpc::Method<global::Grpcservices.BatchRequest, global::Grpcservices.BatchData>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "ListBatchData",
        __Marshaller_BatchRequest,
        __Marshaller_BatchData);

    static readonly grpc::Method<global::Grpcservices.BatchRequest, global::Grpcservices.BatchData> __Method_GetBatchTrans = new grpc::Method<global::Grpcservices.BatchRequest, global::Grpcservices.BatchData>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "GetBatchTrans",
        __Marshaller_BatchRequest,
        __Marshaller_BatchData);

    static readonly grpc::Method<global::Grpcservices.Subcenter, global::Grpcservices.DtuList> __Method_GetDtuList = new grpc::Method<global::Grpcservices.Subcenter, global::Grpcservices.DtuList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetDtuList",
        __Marshaller_Subcenter,
        __Marshaller_DtuList);

    static readonly grpc::Method<global::Grpcservices.StationList, global::Grpcservices.TruList> __Method_BatchTime = new grpc::Method<global::Grpcservices.StationList, global::Grpcservices.TruList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BatchTime",
        __Marshaller_StationList,
        __Marshaller_TruList);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Grpcservices.GrpcServicesReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of gRPCServices</summary>
    public abstract partial class gRPCServicesBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Grpcservices.DownConf> GetFeature(global::Grpcservices.DownRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task GetDownConf(grpc::IAsyncStreamReader<global::Grpcservices.DownRequest> requestStream, grpc::IServerStreamWriter<global::Grpcservices.DownConf> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Grpcservices.BatchMsg> GetBatchMsg(global::Grpcservices.BatchRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task ListBatchData(global::Grpcservices.BatchRequest request, grpc::IServerStreamWriter<global::Grpcservices.BatchData> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task GetBatchTrans(grpc::IAsyncStreamReader<global::Grpcservices.BatchRequest> requestStream, grpc::IServerStreamWriter<global::Grpcservices.BatchData> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Grpcservices.DtuList> GetDtuList(global::Grpcservices.Subcenter request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Grpcservices.TruList> BatchTime(global::Grpcservices.StationList request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for gRPCServices</summary>
    public partial class gRPCServicesClient : grpc::ClientBase<gRPCServicesClient>
    {
      /// <summary>Creates a new client for gRPCServices</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public gRPCServicesClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for gRPCServices that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public gRPCServicesClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected gRPCServicesClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected gRPCServicesClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Grpcservices.DownConf GetFeature(global::Grpcservices.DownRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetFeature(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Grpcservices.DownConf GetFeature(global::Grpcservices.DownRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetFeature, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Grpcservices.DownConf> GetFeatureAsync(global::Grpcservices.DownRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetFeatureAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Grpcservices.DownConf> GetFeatureAsync(global::Grpcservices.DownRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetFeature, null, options, request);
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::Grpcservices.DownRequest, global::Grpcservices.DownConf> GetDownConf(grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetDownConf(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::Grpcservices.DownRequest, global::Grpcservices.DownConf> GetDownConf(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_GetDownConf, null, options);
      }
      public virtual global::Grpcservices.BatchMsg GetBatchMsg(global::Grpcservices.BatchRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetBatchMsg(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Grpcservices.BatchMsg GetBatchMsg(global::Grpcservices.BatchRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetBatchMsg, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Grpcservices.BatchMsg> GetBatchMsgAsync(global::Grpcservices.BatchRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetBatchMsgAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Grpcservices.BatchMsg> GetBatchMsgAsync(global::Grpcservices.BatchRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetBatchMsg, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::Grpcservices.BatchData> ListBatchData(global::Grpcservices.BatchRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ListBatchData(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Grpcservices.BatchData> ListBatchData(global::Grpcservices.BatchRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_ListBatchData, null, options, request);
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::Grpcservices.BatchRequest, global::Grpcservices.BatchData> GetBatchTrans(grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetBatchTrans(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::Grpcservices.BatchRequest, global::Grpcservices.BatchData> GetBatchTrans(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_GetBatchTrans, null, options);
      }
      public virtual global::Grpcservices.DtuList GetDtuList(global::Grpcservices.Subcenter request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetDtuList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Grpcservices.DtuList GetDtuList(global::Grpcservices.Subcenter request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetDtuList, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Grpcservices.DtuList> GetDtuListAsync(global::Grpcservices.Subcenter request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetDtuListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Grpcservices.DtuList> GetDtuListAsync(global::Grpcservices.Subcenter request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetDtuList, null, options, request);
      }
      public virtual global::Grpcservices.TruList BatchTime(global::Grpcservices.StationList request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return BatchTime(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Grpcservices.TruList BatchTime(global::Grpcservices.StationList request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BatchTime, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Grpcservices.TruList> BatchTimeAsync(global::Grpcservices.StationList request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return BatchTimeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Grpcservices.TruList> BatchTimeAsync(global::Grpcservices.StationList request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BatchTime, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override gRPCServicesClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new gRPCServicesClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(gRPCServicesBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetFeature, serviceImpl.GetFeature)
          .AddMethod(__Method_GetDownConf, serviceImpl.GetDownConf)
          .AddMethod(__Method_GetBatchMsg, serviceImpl.GetBatchMsg)
          .AddMethod(__Method_ListBatchData, serviceImpl.ListBatchData)
          .AddMethod(__Method_GetBatchTrans, serviceImpl.GetBatchTrans)
          .AddMethod(__Method_GetDtuList, serviceImpl.GetDtuList)
          .AddMethod(__Method_BatchTime, serviceImpl.BatchTime).Build();
    }

  }
}
#endregion
